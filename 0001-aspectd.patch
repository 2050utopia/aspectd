From b893f19d5ae6514b219d8b2d2296826fa68034fb Mon Sep 17 00:00:00 2001
From: KyleWong <kang.wang1988@gmail.com>
Date: Tue, 15 Oct 2019 22:41:40 +0800
Subject: [PATCH] aspectd

---
 packages/flutter_tools/lib/src/aspectd.dart   | 305 ++++++++++++++++++
 .../lib/src/commands/build_aot.dart           |   6 +
 .../lib/src/commands/build_bundle.dart        |   6 +
 3 files changed, 317 insertions(+)
 create mode 100644 packages/flutter_tools/lib/src/aspectd.dart

diff --git a/packages/flutter_tools/lib/src/aspectd.dart b/packages/flutter_tools/lib/src/aspectd.dart
new file mode 100644
index 000000000..1d35fab08
--- /dev/null
+++ b/packages/flutter_tools/lib/src/aspectd.dart
@@ -0,0 +1,305 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+import 'dart:io';
+
+import 'package:args/args.dart';
+
+import 'artifacts.dart';
+import 'base/build.dart';
+import 'base/common.dart';
+import 'base/file_system.dart';
+import 'base/process_manager.dart';
+import 'build_info.dart';
+import 'bundle.dart';
+import 'cache.dart';
+import 'dart/package_map.dart';
+import 'dart/sdk.dart';
+import 'globals.dart';
+import 'runner/flutter_command.dart';
+
+const String unmatchDartKernelBinaryErrMsg =
+    "Can't load Kernel binary: Invalid kernel binary format version.";
+const String aspectdImplPackageRelPath = '.';
+const String aspectdImplPackageName = 'aspectd_impl';
+
+class AspectdHook {
+  static bool _isAspectdEnabled;
+  static String aspectdTransformerSnapshot;
+  static Directory getAspectdDirectory(Directory rootProjectDir) {
+    return fs.directory(fs.path.normalize(fs.path.join(rootProjectDir.path,
+        aspectdImplPackageRelPath, aspectdImplPackageName)));
+  }
+
+  static Future<void> checkAspectdTransformerSnapshot() async {
+    final PackageMap packageMap = PackageMap(fs.path.join(
+        getAspectdDirectory(fs.currentDirectory).path,
+        PackageMap.globalPackagesPath));
+    if (packageMap.map != null) {
+      final String aspectdLibPath = packageMap.map['aspectd']?.toFilePath();
+      if (aspectdLibPath != null) {
+        final String expectedTransformerSnapshotPath = fs.path.join(
+            fs.directory(aspectdLibPath).parent.path,
+            'snapshot',
+            'aspectd.dart.snapshot');
+        final File expectedTransformerSnapshot =
+            fs.file(expectedTransformerSnapshotPath);
+        final String expectedDartSha = getExpectedDartSha();
+        final String aspectdPubspecPath = fs.path
+            .join(fs.directory(aspectdLibPath).parent.path, 'pubspec.yaml');
+        final String defaultDartSha = getDartShaFromPubspec(aspectdPubspecPath);
+        if (defaultDartSha == null || expectedDartSha == null) {
+          return;
+        }
+        if (defaultDartSha != expectedDartSha) {
+          if (expectedTransformerSnapshot.existsSync()) {
+            expectedTransformerSnapshot.deleteSync();
+          }
+          final File aspectdPubspecFile = fs.file(aspectdPubspecPath);
+          final String aspectdPubspecContent = aspectdPubspecFile
+              .readAsStringSync()
+              .replaceAll(defaultDartSha, expectedDartSha);
+          aspectdPubspecFile.writeAsStringSync(aspectdPubspecContent,
+              flush: true);
+        }
+        if (!expectedTransformerSnapshot.existsSync()) {
+          await generateAspectdSnapshot(expectedTransformerSnapshotPath);
+        }
+        if (expectedTransformerSnapshot.existsSync()) {
+          final List<String> command = <String>[
+            artifacts.getArtifactPath(Artifact.engineDartBinary),
+            expectedTransformerSnapshotPath,
+          ];
+          final ProcessResult result = await processManager.run(command);
+          final String outputStr = result.stderr.toString().trim();
+          if (outputStr == unmatchDartKernelBinaryErrMsg) {
+            fs.file(expectedTransformerSnapshotPath).deleteSync();
+            return;
+          }
+          aspectdTransformerSnapshot = expectedTransformerSnapshotPath;
+        }
+      }
+    }
+  }
+
+  static String getExpectedDartSha() {
+    final File engineVersionFile = fs.file(fs.path
+        .join(Cache.flutterRoot, 'bin', 'cache', 'dart-sdk', 'revision'));
+    final String engineVersion = engineVersionFile.readAsStringSync().trim();
+    return engineVersion;
+  }
+
+  static String getDartShaFromPubspec(String pubspecFilePath) {
+    final File pubspecFile = fs.file(pubspecFilePath);
+    final String pubspecContent = pubspecFile.readAsStringSync();
+    final RegExp kernelItemReg = RegExp(
+        r'(\s+kernel\s*\:)(\s+git\s*\:)(\s+[a-z]+\s*\:.*)(\s+[a-z]+\s*\:.*)(\s+[a-z]+\s*\:.*)');
+    final Match matches = kernelItemReg.firstMatch(pubspecContent);
+    if (matches == null) {
+      return null;
+    }
+    final String matchItem = matches.group(0);
+    final RegExp kernelRefReg = RegExp(r'ref\s*\:\s*[0-9a-z]+');
+    return kernelRefReg.firstMatch(matchItem).group(0).split(':')[1].trim();
+  }
+
+  static Future<void> generateAspectdSnapshot(
+      String aspectdSnapshotPath) async {
+    final Directory snapshotDir = fs.file(aspectdSnapshotPath).parent;
+    if (!snapshotDir.existsSync()) {
+      fs.directory(snapshotDir).createSync(recursive: true);
+    }
+    final File pubspecLockFile =
+        fs.file(fs.path.join(snapshotDir.parent.path, 'pubspec.lock'));
+    if (pubspecLockFile.existsSync()) {
+      pubspecLockFile.deleteSync();
+    }
+    await processManager.run(
+        <String>[sdkBinaryName('pub'), 'get', '--verbosity=warning'],
+        workingDirectory: snapshotDir.parent.path,
+        environment: <String, String>{'FLUTTER_ROOT': Cache.flutterRoot});
+    if (pubspecLockFile.existsSync()) {
+      await processManager.run(<String>[
+        sdkBinaryName('dart'),
+        '--snapshot=snapshot/aspectd.dart.snapshot',
+        'tool/starter.dart'
+      ], workingDirectory: snapshotDir.parent.path);
+    }
+  }
+
+  static Future<bool> isAspectdEnabled() async {
+    if (_isAspectdEnabled != null) {
+      return _isAspectdEnabled;
+    }
+    final Directory aspectdDirectory = getAspectdDirectory(fs.currentDirectory);
+    if (!(aspectdDirectory.existsSync() &&
+        fs.file(fs.path.join(aspectdDirectory.path, 'pubspec.yaml')).existsSync() &&
+        fs.file(fs.path.join(aspectdDirectory.path, PackageMap.globalPackagesPath))
+            .existsSync() &&
+        fs.file(fs.path.join(aspectdDirectory.path, 'lib', aspectdImplPackageName + '.dart'))
+            .existsSync())) {
+      _isAspectdEnabled = false;
+      return _isAspectdEnabled;
+    }
+    await checkAspectdTransformerSnapshot();
+    if (aspectdTransformerSnapshot == null ||
+        !fs.file(aspectdTransformerSnapshot).existsSync()) {
+      _isAspectdEnabled = false;
+    } else {
+      _isAspectdEnabled = true;
+    }
+    return _isAspectdEnabled;
+  }
+
+  Future<FlutterCommandResult> runBuildBundleDillCommand(
+      FlutterCommand flutterCommand) async {
+    final ArgResults argResults = flutterCommand.argResults;
+    final String targetPlatform = argResults['target-platform'];
+    final TargetPlatform platform = getTargetPlatformForName(targetPlatform);
+    if (platform == null) {
+      throwToolExit('Unknown platform: $targetPlatform');
+    }
+
+    final BuildMode buildMode = flutterCommand.getBuildMode();
+    final Directory mainDirectory = fs.currentDirectory;
+    final Directory aspectdDirectory = getAspectdDirectory(fs.currentDirectory);
+    final String defaultKernelFilePath = fs.path.join(mainDirectory.path,
+        getDefaultApplicationKernelPath(trackWidgetCreation: false));
+    final String aspectdKernelFilePath =
+        fs.path.join(aspectdDirectory.path, 'build', 'app.dill');
+    final String aspectdTransformedKernelFilePath =
+        fs.path.join(aspectdDirectory.path, 'build', 'app.aspectd.dill');
+    final String asssetsDir = argResults['asset-dir']
+        .replaceAll(mainDirectory.path, aspectdDirectory.path);
+    final String mainPath =
+        fs.path.join(aspectdDirectory.path, 'lib', aspectdImplPackageName + '.dart');
+    fs.currentDirectory = aspectdDirectory;
+    await BundleBuilder().build(
+        platform: platform,
+        buildMode: buildMode,
+        mainPath: mainPath,
+        manifestPath: argResults['manifest'],
+        depfilePath: argResults['depfile'],
+        privateKeyPath: argResults['private-key'],
+        assetDirPath: asssetsDir,
+        precompiledSnapshot: argResults['precompiled'],
+        reportLicensedPackages: argResults['report-licensed-packages'],
+        trackWidgetCreation: argResults['track-widget-creation'],
+        extraFrontEndOptions: argResults[FlutterOptions.kExtraFrontEndOptions],
+        extraGenSnapshotOptions:
+            argResults[FlutterOptions.kExtraGenSnapshotOptions],
+        fileSystemScheme: argResults['filesystem-scheme'],
+        fileSystemRoots: argResults['filesystem-root'],
+        applicationKernelFilePath: aspectdKernelFilePath);
+
+    if (!fs.file(aspectdKernelFilePath).existsSync()) {
+      fs.currentDirectory = mainDirectory;
+      return null;
+    }
+
+    final List<String> command = <String>[
+      artifacts.getArtifactPath(Artifact.engineDartBinary),
+      aspectdTransformerSnapshot,
+      '--input',
+      aspectdKernelFilePath,
+      '--sdk-root',
+      fs.file(artifacts.getArtifactPath(Artifact.platformKernelDill)).parent
+          .path + fs.path.separator,
+      '--output',
+      aspectdTransformedKernelFilePath
+    ];
+
+    final ProcessResult result = await processManager.run(command);
+    if (result.exitCode != 0) {
+      fs.currentDirectory = mainDirectory;
+      throwToolExit('Transformer terminated unexpectedly.');
+      return null;
+    }
+
+    final File defaultKernelFile = fs.file(defaultKernelFilePath);
+    if (defaultKernelFile.existsSync()) {
+      defaultKernelFile.deleteSync();
+    }
+
+    fs.file(aspectdTransformedKernelFilePath).copySync(defaultKernelFilePath);
+    final File assetsBlob =
+        fs.file(fs.path.join(argResults['asset-dir'], 'kernel_blob.bin'));
+    if (assetsBlob.existsSync()) {
+      assetsBlob.deleteSync();
+    }
+    fs.file(defaultKernelFilePath).copySync(assetsBlob.path);
+    fs.currentDirectory = mainDirectory;
+    return null;
+  }
+
+  Future<FlutterCommandResult> runBuildAOTDillCommand(
+      FlutterCommand flutterCommand) async {
+    final ArgResults argResults = flutterCommand.argResults;
+    final String targetPlatform = argResults['target-platform'];
+    final TargetPlatform platform = getTargetPlatformForName(targetPlatform);
+    if (platform == null) {
+      throwToolExit('Unknown platform: $targetPlatform');
+    }
+
+    final BuildMode buildMode = flutterCommand.getBuildMode();
+    final Directory mainDirectory = fs.currentDirectory;
+    final Directory aspectdDirectory = getAspectdDirectory(mainDirectory);
+    String mainPath =
+        fs.path.join(aspectdDirectory.path, 'lib', aspectdImplPackageName + '.dart');
+    fs.currentDirectory = aspectdDirectory;
+    final AOTSnapshotter snapshotter = AOTSnapshotter();
+    final String outputPath =
+        (argResults['output-dir'] ?? getAotBuildDirectory())
+            .replaceAll(mainDirectory.path, aspectdDirectory.path);
+
+    // Compile to kernel.
+    mainPath = await snapshotter.compileKernel(
+      platform: platform,
+      buildMode: buildMode,
+      mainPath: mainPath,
+      packagesPath: PackageMap.globalPackagesPath,
+      trackWidgetCreation: false,
+      outputPath: outputPath,
+      extraFrontEndOptions: argResults[FlutterOptions.kExtraFrontEndOptions],
+    );
+
+    if (mainPath == null) {
+      fs.currentDirectory = mainDirectory;
+      throwToolExit('Compiler terminated unexpectedly.');
+      return null;
+    }
+
+    if (!mainPath.startsWith(fs.currentDirectory.path)) {
+      mainPath = fs.path.join(fs.currentDirectory.path, mainPath);
+    }
+
+    final String aspectdTransformedKernelFilePath = mainPath + '.aspectd.dill';
+    final String defaultKernelFilePath =
+        mainPath.replaceAll(aspectdDirectory.path, mainDirectory.path);
+
+    final List<String> command = <String>[
+      artifacts.getArtifactPath(Artifact.engineDartBinary),
+      aspectdTransformerSnapshot,
+      '--input',
+      mainPath,
+      '--output',
+      aspectdTransformedKernelFilePath
+    ];
+
+    final ProcessResult result = await processManager.run(command);
+    if (result.exitCode != 0) {
+      fs.currentDirectory = mainDirectory;
+      throwToolExit('Transformer terminated unexpectedly.');
+      return null;
+    }
+
+    final File defaultKernelFile = fs.file(defaultKernelFilePath);
+    if (defaultKernelFile.existsSync()) {
+      defaultKernelFile.deleteSync();
+    }
+    fs.file(aspectdTransformedKernelFilePath).copySync(defaultKernelFilePath);
+    fs.currentDirectory = mainDirectory;
+    return null;
+  }
+}
diff --git a/packages/flutter_tools/lib/src/commands/build_aot.dart b/packages/flutter_tools/lib/src/commands/build_aot.dart
index 246ab6abd..17cf29148 100644
--- a/packages/flutter_tools/lib/src/commands/build_aot.dart
+++ b/packages/flutter_tools/lib/src/commands/build_aot.dart
@@ -4,6 +4,8 @@
 
 import 'dart:async';
 
+import '../artifacts.dart';
+import '../aspectd.dart';
 import '../base/build.dart';
 import '../base/common.dart';
 import '../base/file_system.dart';
@@ -104,6 +106,10 @@ class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmen
         return null;
       }
 
+      if (await AspectdHook.isAspectdEnabled()) {
+        await AspectdHook().runBuildAOTDillCommand(this);
+      }
+
       // Build AOT snapshot.
       if (platform == TargetPlatform.ios) {
         // Determine which iOS architectures to build for.
diff --git a/packages/flutter_tools/lib/src/commands/build_bundle.dart b/packages/flutter_tools/lib/src/commands/build_bundle.dart
index da0c7fcdf..66efcb3d5 100644
--- a/packages/flutter_tools/lib/src/commands/build_bundle.dart
+++ b/packages/flutter_tools/lib/src/commands/build_bundle.dart
@@ -4,6 +4,7 @@
 
 import 'dart:async';
 
+import '../aspectd.dart';
 import '../base/common.dart';
 import '../base/file_system.dart';
 import '../build_info.dart';
@@ -129,6 +130,11 @@ class BuildBundleCommand extends BuildSubCommand {
       fileSystemScheme: argResults['filesystem-scheme'],
       fileSystemRoots: argResults['filesystem-root'],
     );
+
+    if (await AspectdHook.isAspectdEnabled()) {
+      await AspectdHook().runBuildBundleDillCommand(this);
+    }
+
     return null;
   }
 }
-- 
2.21.0 (Apple Git-122)

