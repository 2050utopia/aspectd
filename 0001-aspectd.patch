From b8cd6e307af22b1bfc24ee0f0f697cf63a1fee64 Mon Sep 17 00:00:00 2001
From: KyleWong <kang.wang1988@gmail.com>
Date: Tue, 23 Jul 2019 15:51:15 +0800
Subject: [PATCH] Aspectd support

---
 packages/flutter_tools/lib/src/aspectd.dart   | 347 ++++++++++++++++++
 .../lib/src/commands/build_aot.dart           | 114 ++++--
 .../lib/src/commands/build_bundle.dart        |   6 +
 3 files changed, 430 insertions(+), 37 deletions(-)
 create mode 100644 packages/flutter_tools/lib/src/aspectd.dart

diff --git a/packages/flutter_tools/lib/src/aspectd.dart b/packages/flutter_tools/lib/src/aspectd.dart
new file mode 100644
index 000000000..f621f9ea2
--- /dev/null
+++ b/packages/flutter_tools/lib/src/aspectd.dart
@@ -0,0 +1,347 @@
+// Copyright 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+import 'dart:io';
+
+import 'package:args/args.dart';
+
+import 'artifacts.dart';
+import 'base/build.dart';
+import 'base/common.dart';
+import 'base/file_system.dart';
+import 'base/process.dart';
+import 'base/process_manager.dart';
+import 'build_info.dart';
+import 'bundle.dart';
+import 'cache.dart';
+import 'dart/package_map.dart';
+import 'dart/sdk.dart';
+import 'globals.dart';
+import 'runner/flutter_command.dart';
+
+const String unmatchDartKernelBinaryErrMsg =
+    "Can't load Kernel binary: Invalid kernel binary format version.";
+const String aopPackageRelPath = '.';
+const String aopPackageName = 'aop';
+
+class AspectdHook {
+  static bool _isAspectdEnabled;
+  static String aspectdTransformerSnapshot;
+  static Directory getAopDirectory(Directory rootProjectDir) {
+    return fs.directory(fs.path.normalize(
+        fs.path.join(rootProjectDir.path, aopPackageRelPath, aopPackageName)));
+  }
+
+  static Future<void> checkAspectdTransformerSnapshot() async {
+    final PackageMap packageMap = PackageMap(fs.path.join(
+        getAopDirectory(fs.currentDirectory).path,
+        PackageMap.globalPackagesPath));
+    if (packageMap.map != null) {
+      final String aspectdLibPath = packageMap.map['aspectd']?.toFilePath();
+      if (aspectdLibPath != null) {
+        final String expectedTransformerSnapshotPath = fs.path.join(
+            fs.directory(aspectdLibPath).parent.path,
+            'snapshot',
+            'aspectd.dart.snapshot');
+        final File expectedTransformerSnapshot =
+            fs.file(expectedTransformerSnapshotPath);
+        final String expectedDartSha = await getExpectedDartSha();
+        final String aspectdPubspecPath = fs.path
+            .join(fs.directory(aspectdLibPath).parent.path, 'pubspec.yaml');
+        final String defaultDartSha = getDartShaFromPubspec(aspectdPubspecPath);
+        if (defaultDartSha == null || expectedDartSha == null) {
+          return;
+        }
+        if (defaultDartSha != expectedDartSha) {
+          if (expectedTransformerSnapshot.existsSync()) {
+            expectedTransformerSnapshot.deleteSync();
+          }
+          final File aspectdPubspecFile = fs.file(aspectdPubspecPath);
+          final String aspectdPubspecContent = aspectdPubspecFile
+              .readAsStringSync()
+              .replaceAll(defaultDartSha, expectedDartSha);
+          aspectdPubspecFile.writeAsStringSync(aspectdPubspecContent,
+              flush: true);
+        }
+        if (!expectedTransformerSnapshot.existsSync()) {
+          await generateAspectdSnapshot(expectedTransformerSnapshotPath);
+        }
+        if (expectedTransformerSnapshot.existsSync()) {
+          final List<String> command = <String>[
+            artifacts.getArtifactPath(Artifact.engineDartBinary),
+            expectedTransformerSnapshotPath,
+          ];
+          final ProcessResult result = await processManager.run(command);
+          final String outputStr = result.stderr.toString().trim();
+          if (outputStr == unmatchDartKernelBinaryErrMsg) {
+            return;
+          }
+          aspectdTransformerSnapshot = expectedTransformerSnapshotPath;
+        }
+      }
+    }
+  }
+
+  static Future<String> getExpectedDartSha() async {
+    final File engineVersionFile = fs.file(
+        fs.path.join(Cache.flutterRoot, 'bin', 'internal', 'engine.version'));
+    final String engineVersion = engineVersionFile.readAsStringSync().trim();
+
+    final Uri url = Uri.parse(
+        'http://raw.githubusercontent.com/flutter/engine/$engineVersion/DEPS');
+    final HttpClient httpClient = HttpClient();
+    HttpClientRequest request;
+    try {
+      request = await httpClient.getUrl(url);
+    } on HandshakeException catch (error) {
+      printTrace(error.toString());
+      return null;
+    } on SocketException catch (error) {
+      printTrace('Fetch engine.version DEPS error: $error');
+      return null;
+    }
+    final HttpClientResponse response = await request.close();
+    if (response.statusCode != 200) {
+      printTrace(
+          'Fetch engine.version DEPS error: ${response.statusCode} ${response.reasonPhrase}');
+      return null;
+    }
+    try {
+      final BytesBuilder responseBody = BytesBuilder(copy: false);
+      await response.forEach(responseBody.add);
+      final String depsContent = String.fromCharCodes(responseBody.takeBytes());
+      final RegExp dartRevisionReg = RegExp(r"'dart_revision'\:\s'[a-z0-9]+'");
+      final Match matches = dartRevisionReg.firstMatch(depsContent);
+      if (matches == null) {
+        return null;
+      }
+      String dartSha = matches.group(0).split(':')[1].trim();
+      dartSha = dartSha.substring(1, dartSha.length - 1);
+      return Future<String>.sync(() => dartSha);
+    } on IOException catch (error) {
+      printTrace('Fetch engine.version DEPS error: $error');
+      return null;
+    }
+  }
+
+  static String getDartShaFromPubspec(String pubspecFilePath) {
+    final File pubspecFile = fs.file(pubspecFilePath);
+    final String pubspecContent = pubspecFile.readAsStringSync();
+    final RegExp kernelItemReg = RegExp(
+        r'(\s+kernel\s*\:)(\s+git\s*\:)(\s+[a-z]+\s*\:.*)(\s+[a-z]+\s*\:.*)(\s+[a-z]+\s*\:.*)');
+    final Match matches = kernelItemReg.firstMatch(pubspecContent);
+    if (matches == null) {
+      return null;
+    }
+    final String matchItem = matches.group(0);
+    final RegExp kernelRefReg = RegExp(r'ref\s*\:\s*[0-9a-z]+');
+    return kernelRefReg.firstMatch(matchItem).group(0).split(':')[1].trim();
+  }
+
+  static Future<void> generateAspectdSnapshot(
+      String aspectdSnapshotPath) async {
+    final Directory snapshotDir = fs.file(aspectdSnapshotPath).parent;
+    if (!snapshotDir.existsSync()) {
+      fs.directory(snapshotDir).createSync(recursive: true);
+    }
+    final File pubspecLockFile =
+        fs.file(fs.path.join(snapshotDir.parent.path, 'pubspec.lock'));
+    if (pubspecLockFile.existsSync()) {
+      pubspecLockFile.deleteSync();
+    }
+    await runCommandAndStreamOutput(
+        <String>[sdkBinaryName('pub'), 'get', '--verbosity=warning'],
+        workingDirectory: snapshotDir.parent.path,
+        environment: <String, String>{'FLUTTER_ROOT': Cache.flutterRoot});
+    if (pubspecLockFile.existsSync()) {
+      await runCommandAndStreamOutput(<String>[
+        sdkBinaryName('dart'),
+        '--snapshot=snapshot/aspectd.dart.snapshot',
+        'tool/starter.dart'
+      ], workingDirectory: snapshotDir.parent.path);
+    }
+  }
+
+  static Future<bool> isAspectdEnabled() async {
+    if (_isAspectdEnabled != null) {
+      return _isAspectdEnabled;
+    }
+    final Directory aopDirectory = getAopDirectory(fs.currentDirectory);
+    if (!(aopDirectory.existsSync() &&
+        fs.file(fs.path.join(aopDirectory.path, 'pubspec.yaml')).existsSync() &&
+        fs
+            .file(
+                fs.path.join(aopDirectory.path, PackageMap.globalPackagesPath))
+            .existsSync() &&
+        fs
+            .file(fs.path
+                .join(aopDirectory.path, 'lib', aopPackageName + '.dart'))
+            .existsSync())) {
+      _isAspectdEnabled = false;
+      return _isAspectdEnabled;
+    }
+    await checkAspectdTransformerSnapshot();
+    if (aspectdTransformerSnapshot == null ||
+        !fs.file(aspectdTransformerSnapshot).existsSync()) {
+      _isAspectdEnabled = false;
+    } else {
+      _isAspectdEnabled = true;
+    }
+    return _isAspectdEnabled;
+  }
+
+  Future<FlutterCommandResult> runBuildBundleDillCommand(
+      FlutterCommand flutterCommand) async {
+    final ArgResults argResults = flutterCommand.argResults;
+    final String targetPlatform = argResults['target-platform'];
+    final TargetPlatform platform = getTargetPlatformForName(targetPlatform);
+    if (platform == null) {
+      throwToolExit('Unknown platform: $targetPlatform');
+    }
+
+    final BuildMode buildMode = flutterCommand.getBuildMode();
+    final Directory mainDirectory = fs.currentDirectory;
+    final Directory aopDirectory = getAopDirectory(fs.currentDirectory);
+    final String defaultKernelFilePath = fs.path.join(mainDirectory.path,
+        getDefaultApplicationKernelPath(trackWidgetCreation: false));
+    final String aopKernelFilePath =
+        fs.path.join(aopDirectory.path, 'build', 'app.dill');
+    final String aspectdKernelFilePath =
+        fs.path.join(aopDirectory.path, 'build', 'app.aspectd.dill');
+    final String asssetsDir = argResults['asset-dir']
+        .replaceAll(mainDirectory.path, aopDirectory.path);
+    final String mainPath =
+        fs.path.join(aopDirectory.path, 'lib', aopPackageName + '.dart');
+    fs.currentDirectory = aopDirectory;
+    await BundleBuilder().build(
+        platform: platform,
+        buildMode: buildMode,
+        mainPath: mainPath,
+        manifestPath: argResults['manifest'],
+        depfilePath: argResults['depfile'],
+        privateKeyPath: argResults['private-key'],
+        assetDirPath: asssetsDir,
+        precompiledSnapshot: argResults['precompiled'],
+        reportLicensedPackages: argResults['report-licensed-packages'],
+        trackWidgetCreation: argResults['track-widget-creation'],
+        extraFrontEndOptions: argResults[FlutterOptions.kExtraFrontEndOptions],
+        extraGenSnapshotOptions:
+            argResults[FlutterOptions.kExtraGenSnapshotOptions],
+        fileSystemScheme: argResults['filesystem-scheme'],
+        fileSystemRoots: argResults['filesystem-root'],
+        applicationKernelFilePath: aopKernelFilePath);
+
+    if (!fs.file(aopKernelFilePath).existsSync()) {
+      fs.currentDirectory = mainDirectory;
+      return null;
+    }
+
+    final List<String> command = <String>[
+      artifacts.getArtifactPath(Artifact.engineDartBinary),
+      aspectdTransformerSnapshot,
+      '--input',
+      aopKernelFilePath,
+      '--sdk-root',
+      fs
+              .file(artifacts.getArtifactPath(Artifact.platformKernelDill))
+              .parent
+              .path +
+          fs.path.separator,
+      '--output',
+      aspectdKernelFilePath
+    ];
+
+    final ProcessResult result = await processManager.run(command);
+    if (result.exitCode != 0) {
+      fs.currentDirectory = mainDirectory;
+      throwToolExit('Transformer terminated unexpectedly.');
+      return null;
+    }
+
+    final File defaultKernelFile = fs.file(defaultKernelFilePath);
+    if (defaultKernelFile.existsSync()) {
+      defaultKernelFile.deleteSync();
+    }
+
+    fs.file(aspectdKernelFilePath).renameSync(defaultKernelFilePath);
+    final File assetsBlob =
+        fs.file(fs.path.join(argResults['asset-dir'], 'kernel_blob.bin'));
+    if (assetsBlob.existsSync()) {
+      assetsBlob.deleteSync();
+    }
+    fs.file(defaultKernelFilePath).copySync(assetsBlob.path);
+    fs.currentDirectory = mainDirectory;
+    return null;
+  }
+
+  Future<FlutterCommandResult> runBuildAOTDillCommand(
+      FlutterCommand flutterCommand) async {
+    final ArgResults argResults = flutterCommand.argResults;
+    final String targetPlatform = argResults['target-platform'];
+    final TargetPlatform platform = getTargetPlatformForName(targetPlatform);
+    if (platform == null) {
+      throwToolExit('Unknown platform: $targetPlatform');
+    }
+
+    final BuildMode buildMode = flutterCommand.getBuildMode();
+    final Directory mainDirectory = fs.currentDirectory;
+    final Directory aopDirectory = getAopDirectory(mainDirectory);
+    String mainPath =
+        fs.path.join(aopDirectory.path, 'lib', aopPackageName + '.dart');
+    fs.currentDirectory = aopDirectory;
+    final AOTSnapshotter snapshotter = AOTSnapshotter();
+    final String outputPath =
+        (argResults['output-dir'] ?? getAotBuildDirectory())
+            .replaceAll(mainDirectory.path, aopDirectory.path);
+
+    // Compile to kernel.
+    mainPath = await snapshotter.compileKernel(
+      platform: platform,
+      buildMode: buildMode,
+      mainPath: mainPath,
+      packagesPath: PackageMap.globalPackagesPath,
+      trackWidgetCreation: false,
+      outputPath: outputPath,
+      extraFrontEndOptions: argResults[FlutterOptions.kExtraFrontEndOptions],
+    );
+
+    if (mainPath == null) {
+      fs.currentDirectory = mainDirectory;
+      throwToolExit('Compiler terminated unexpectedly.');
+      return null;
+    }
+
+    if (!mainPath.startsWith(fs.currentDirectory.path)) {
+      mainPath = fs.path.join(fs.currentDirectory.path, mainPath);
+    }
+
+    final String aspectdKernelFilePath = mainPath + '.aspectd.dill';
+    final String defaultKernelFilePath =
+        mainPath.replaceAll(aopDirectory.path, mainDirectory.path);
+
+    final List<String> command = <String>[
+      artifacts.getArtifactPath(Artifact.engineDartBinary),
+      aspectdTransformerSnapshot,
+      '--input',
+      mainPath,
+      '--output',
+      aspectdKernelFilePath
+    ];
+
+    final ProcessResult result = await processManager.run(command);
+    if (result.exitCode != 0) {
+      fs.currentDirectory = mainDirectory;
+      throwToolExit('Transformer terminated unexpectedly.');
+      return null;
+    }
+
+    final File defaultKernelFile = fs.file(defaultKernelFilePath);
+    if (defaultKernelFile.existsSync()) {
+      defaultKernelFile.deleteSync();
+    }
+    fs.file(aspectdKernelFilePath).renameSync(defaultKernelFilePath);
+    fs.currentDirectory = mainDirectory;
+    return null;
+  }
+}
diff --git a/packages/flutter_tools/lib/src/commands/build_aot.dart b/packages/flutter_tools/lib/src/commands/build_aot.dart
index e22d70d39..def8e845d 100644
--- a/packages/flutter_tools/lib/src/commands/build_aot.dart
+++ b/packages/flutter_tools/lib/src/commands/build_aot.dart
@@ -5,6 +5,7 @@
 import 'dart:async';
 
 import '../artifacts.dart';
+import '../aspectd.dart';
 import '../base/build.dart';
 import '../base/common.dart';
 import '../base/context.dart';
@@ -20,46 +21,56 @@ import '../resident_runner.dart';
 import '../runner/flutter_command.dart';
 import 'build.dart';
 
-class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmentArtifacts {
+class BuildAotCommand extends BuildSubCommand
+    with TargetPlatformBasedDevelopmentArtifacts {
   BuildAotCommand() {
     usesTargetOption();
     addBuildModeFlags();
     usesPubOption();
     argParser
       ..addOption('output-dir', defaultsTo: getAotBuildDirectory())
-      ..addOption('target-platform',
+      ..addOption(
+        'target-platform',
         defaultsTo: 'android-arm',
         allowed: <String>['android-arm', 'android-arm64', 'ios'],
       )
       ..addFlag('quiet', defaultsTo: false)
-      ..addFlag('report-timings',
+      ..addFlag(
+        'report-timings',
         negatable: false,
         defaultsTo: false,
-        help: 'Report timing information about build steps in machine readable form,',
+        help:
+            'Report timing information about build steps in machine readable form,',
       )
       // track-widget-creation is exposed as a flag here but ignored to deal with build
       // invalidation issues - there are no plans to support it for AOT mode.
-      ..addFlag('track-widget-creation',
+      ..addFlag(
+        'track-widget-creation',
         defaultsTo: false,
         hide: true,
       )
-      ..addMultiOption('ios-arch',
+      ..addMultiOption(
+        'ios-arch',
         splitCommas: true,
         defaultsTo: defaultIOSArchs.map<String>(getNameForIOSArch),
         allowed: IOSArch.values.map<String>(getNameForIOSArch),
         help: 'iOS architectures to build.',
       )
-      ..addMultiOption(FlutterOptions.kExtraFrontEndOptions,
+      ..addMultiOption(
+        FlutterOptions.kExtraFrontEndOptions,
         splitCommas: true,
         hide: true,
       )
-      ..addMultiOption(FlutterOptions.kExtraGenSnapshotOptions,
+      ..addMultiOption(
+        FlutterOptions.kExtraGenSnapshotOptions,
         splitCommas: true,
         hide: true,
       )
-      ..addFlag('bitcode',
+      ..addFlag(
+        'bitcode',
         defaultsTo: false,
-        help: 'Build the AOT bundle with bitcode. Requires a compatible bitcode engine.',
+        help:
+            'Build the AOT bundle with bitcode. Requires a compatible bitcode engine.',
         hide: true,
       );
   }
@@ -68,21 +79,22 @@ class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmen
   final String name = 'aot';
 
   @override
-  final String description = "Build an ahead-of-time compiled snapshot of your app's Dart code.";
+  final String description =
+      "Build an ahead-of-time compiled snapshot of your app's Dart code.";
 
   @override
   Future<FlutterCommandResult> runCommand() async {
     final String targetPlatform = argResults['target-platform'];
     final TargetPlatform platform = getTargetPlatformForName(targetPlatform);
-    if (platform == null)
-      throwToolExit('Unknown platform: $targetPlatform');
+    if (platform == null) throwToolExit('Unknown platform: $targetPlatform');
 
     final bool bitcode = argResults['bitcode'];
     final BuildMode buildMode = getBuildMode();
 
     if (bitcode) {
       if (platform != TargetPlatform.ios) {
-        throwToolExit('Bitcode is only supported on iOS (TargetPlatform is $targetPlatform).');
+        throwToolExit(
+            'Bitcode is only supported on iOS (TargetPlatform is $targetPlatform).');
       }
       await validateBitcode();
     }
@@ -95,11 +107,13 @@ class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmen
         timeout: timeoutConfiguration.slowOperation,
       );
     }
-    final String outputPath = argResults['output-dir'] ?? getAotBuildDirectory();
+    final String outputPath =
+        argResults['output-dir'] ?? getAotBuildDirectory();
     final bool reportTimings = argResults['report-timings'];
     try {
       String mainPath = findMainDartFile(targetFile);
-      final AOTSnapshotter snapshotter = AOTSnapshotter(reportTimings: reportTimings);
+      final AOTSnapshotter snapshotter =
+          AOTSnapshotter(reportTimings: reportTimings);
 
       // Compile to kernel.
       mainPath = await snapshotter.compileKernel(
@@ -116,10 +130,15 @@ class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmen
         return null;
       }
 
+      if (await AspectdHook.isAspectdEnabled()) {
+        await AspectdHook().runBuildAOTDillCommand(this);
+      }
+
       // Build AOT snapshot.
       if (platform == TargetPlatform.ios) {
         // Determine which iOS architectures to build for.
-        final Iterable<IOSArch> buildArchs = argResults['ios-arch'].map<IOSArch>(getIOSArchForName);
+        final Iterable<IOSArch> buildArchs =
+            argResults['ios-arch'].map<IOSArch>(getIOSArchForName);
         final Map<IOSArch, String> iosBuilds = <IOSArch, String>{};
         for (IOSArch arch in buildArchs)
           iosBuilds[arch] = fs.path.join(outputPath, getNameForIOSArch(arch));
@@ -127,43 +146,59 @@ class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmen
         // Generate AOT snapshot and compile to arch-specific App.framework.
         final Map<IOSArch, Future<int>> exitCodes = <IOSArch, Future<int>>{};
         iosBuilds.forEach((IOSArch iosArch, String outputPath) {
-          exitCodes[iosArch] = snapshotter.build(
+          exitCodes[iosArch] = snapshotter
+              .build(
             platform: platform,
             iosArch: iosArch,
             buildMode: buildMode,
             mainPath: mainPath,
             packagesPath: PackageMap.globalPackagesPath,
             outputPath: outputPath,
-            extraGenSnapshotOptions: argResults[FlutterOptions.kExtraGenSnapshotOptions],
+            extraGenSnapshotOptions:
+                argResults[FlutterOptions.kExtraGenSnapshotOptions],
             bitcode: bitcode,
-          ).then<int>((int buildExitCode) {
+          )
+              .then<int>((int buildExitCode) {
             return buildExitCode;
           });
         });
 
         // Merge arch-specific App.frameworks into a multi-arch App.framework.
-        if ((await Future.wait<int>(exitCodes.values)).every((int buildExitCode) => buildExitCode == 0)) {
-          final Iterable<String> dylibs = iosBuilds.values.map<String>((String outputDir) => fs.path.join(outputDir, 'App.framework', 'App'));
+        if ((await Future.wait<int>(exitCodes.values))
+            .every((int buildExitCode) => buildExitCode == 0)) {
+          final Iterable<String> dylibs = iosBuilds.values.map<String>(
+              (String outputDir) =>
+                  fs.path.join(outputDir, 'App.framework', 'App'));
           fs.directory(fs.path.join(outputPath, 'App.framework'))..createSync();
           await runCheckedAsync(<String>[
             'lipo',
             ...dylibs,
             '-create',
-            '-output', fs.path.join(outputPath, 'App.framework', 'App'),
+            '-output',
+            fs.path.join(outputPath, 'App.framework', 'App'),
           ]);
-          final Iterable<String> dSYMs = iosBuilds.values.map<String>((String outputDir) => fs.path.join(outputDir, 'App.framework.dSYM'));
-          fs.directory(fs.path.join(outputPath, 'App.framework.dSYM', 'Contents', 'Resources', 'DWARF'))..createSync(recursive: true);
+          final Iterable<String> dSYMs = iosBuilds.values.map<String>(
+              (String outputDir) =>
+                  fs.path.join(outputDir, 'App.framework.dSYM'));
+          fs.directory(fs.path.join(outputPath, 'App.framework.dSYM',
+              'Contents', 'Resources', 'DWARF'))
+            ..createSync(recursive: true);
           await runCheckedAsync(<String>[
             'lipo',
             '-create',
-            '-output', fs.path.join(outputPath, 'App.framework.dSYM', 'Contents', 'Resources', 'DWARF', 'App'),
-            ...dSYMs.map((String path) => fs.path.join(path, 'Contents', 'Resources', 'DWARF', 'App'))
+            '-output',
+            fs.path.join(outputPath, 'App.framework.dSYM', 'Contents',
+                'Resources', 'DWARF', 'App'),
+            ...dSYMs.map((String path) =>
+                fs.path.join(path, 'Contents', 'Resources', 'DWARF', 'App'))
           ]);
         } else {
           status?.cancel();
-          exitCodes.forEach((IOSArch iosArch, Future<int> exitCodeFuture) async {
+          exitCodes
+              .forEach((IOSArch iosArch, Future<int> exitCodeFuture) async {
             final int buildExitCode = await exitCodeFuture;
-            printError('Snapshotting ($iosArch) exited with non-zero exit code: $buildExitCode');
+            printError(
+                'Snapshotting ($iosArch) exited with non-zero exit code: $buildExitCode');
           });
         }
       } else {
@@ -174,12 +209,14 @@ class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmen
           mainPath: mainPath,
           packagesPath: PackageMap.globalPackagesPath,
           outputPath: outputPath,
-          extraGenSnapshotOptions: argResults[FlutterOptions.kExtraGenSnapshotOptions],
+          extraGenSnapshotOptions:
+              argResults[FlutterOptions.kExtraGenSnapshotOptions],
           bitcode: false,
         );
         if (snapshotExitCode != 0) {
           status?.cancel();
-          throwToolExit('Snapshotting exited with non-zero exit code: $snapshotExitCode');
+          throwToolExit(
+              'Snapshotting exited with non-zero exit code: $snapshotExitCode');
         }
       }
     } on String catch (error) {
@@ -190,8 +227,7 @@ class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmen
     }
     status?.stop();
 
-    if (outputPath == null)
-      throwToolExit(null);
+    if (outputPath == null) throwToolExit(null);
 
     final String builtMessage = 'Built to $outputPath${fs.path.separator}.';
     if (argResults['quiet']) {
@@ -206,9 +242,11 @@ class BuildAotCommand extends BuildSubCommand with TargetPlatformBasedDevelopmen
 Future<void> validateBitcode() async {
   final Artifacts artifacts = Artifacts.instance;
   if (artifacts is! LocalEngineArtifacts) {
-    throwToolExit('Bitcode is only supported with a local engine built with --bitcode.');
+    throwToolExit(
+        'Bitcode is only supported with a local engine built with --bitcode.');
   }
-  final String flutterFrameworkPath = artifacts.getArtifactPath(Artifact.flutterFramework);
+  final String flutterFrameworkPath =
+      artifacts.getArtifactPath(Artifact.flutterFramework);
   if (!fs.isDirectorySync(flutterFrameworkPath)) {
     throwToolExit('Flutter.framework not found at $flutterFrameworkPath');
   }
@@ -216,10 +254,12 @@ Future<void> validateBitcode() async {
 
   // Check for bitcode in Flutter binary.
   final RunResult otoolResult = await xcode.otool(<String>[
-    '-l', fs.path.join(flutterFrameworkPath, 'Flutter'),
+    '-l',
+    fs.path.join(flutterFrameworkPath, 'Flutter'),
   ]);
   if (!otoolResult.stdout.contains('__LLVM')) {
-    throwToolExit('The Flutter.framework at $flutterFrameworkPath does not contain bitcode.');
+    throwToolExit(
+        'The Flutter.framework at $flutterFrameworkPath does not contain bitcode.');
   }
   final RunResult clangResult = await xcode.clang(<String>['--version']);
   final String clangVersion = clangResult.stdout.split('\n').first;
diff --git a/packages/flutter_tools/lib/src/commands/build_bundle.dart b/packages/flutter_tools/lib/src/commands/build_bundle.dart
index d15cfa49a..24be4ee5e 100644
--- a/packages/flutter_tools/lib/src/commands/build_bundle.dart
+++ b/packages/flutter_tools/lib/src/commands/build_bundle.dart
@@ -4,6 +4,7 @@
 
 import 'dart:async';
 
+import '../aspectd.dart';
 import '../base/common.dart';
 import '../base/file_system.dart';
 import '../build_info.dart';
@@ -137,6 +138,11 @@ class BuildBundleCommand extends BuildSubCommand {
       fileSystemScheme: argResults['filesystem-scheme'],
       fileSystemRoots: argResults['filesystem-root'],
     );
+
+    if (await AspectdHook.isAspectdEnabled()) {
+      await AspectdHook().runBuildBundleDillCommand(this);
+    }
+
     return null;
   }
 }
-- 
2.21.0 (Apple Git-120)

